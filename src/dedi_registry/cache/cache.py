from abc import ABC, abstractmethod

from dedi_registry.etc.consts import CONFIG
from dedi_registry.etc.enums import CacheDriverType


class ChallengeCache(ABC):
    """
    A class for caching Proof of Work challenges.
    """

    @abstractmethod
    async def save_challenge(self,
                             nonce: str,
                             difficulty: int,
                             ):
        """
        Store a generated challenge in the cache.
        :param nonce: The challenge nonce, generated by challenger
        :param difficulty: The difficulty of the challenge, by how many leading zeros it should have
        """

    @abstractmethod
    async def get_challenge(self,
                            nonce: str,
                            ) -> int | None:
        """
        Retrieve a challenge from the cache.
        :param nonce: The challenge nonce to retrieve
        :return: The difficulty of the challenge if it exists and is not expired, otherwise None
        """


class Cache(ABC):
    """
    A class for hot data caching and multiprocess state persistence.
    """

    @property
    @abstractmethod
    def challenge(self) -> ChallengeCache:
        """
        Return the challenges cache instance.
        :return: An instance of Challenge for managing challenge-related data.
        """


_active_cache: Cache | None = None


def get_active_cache() -> Cache:
    """
    Return the active cache set by configuration
    :return: Cache instance based on the configuration.
    """
    global _active_cache

    if _active_cache is not None:
        return _active_cache

    if CONFIG.cache_driver == CacheDriverType.REDIS:
        from .redis_driver import RedisCache
        import redis.asyncio as redis

        redis_client = redis.Redis(
            host=CONFIG.redis_host,
            port=CONFIG.redis_port,
            decode_responses=True,
        )
        RedisCache.set_client(redis_client)
        _active_cache = RedisCache()

        return _active_cache

    if CONFIG.cache_driver == CacheDriverType.MEMORY:
        from .memory_driver import MemoryCache

        _active_cache = MemoryCache()

        return _active_cache

    raise ValueError(
        f'Unsupported cache driver: {CONFIG.cache_driver}.'
    )
