import redis.asyncio as redis

from .cache import ChallengeCache, Cache


class RedisChallengeCache(ChallengeCache):
    """
    A Redis-based implementation of the ChallengeCache for caching challenge data.
    """

    def __init__(self,
                 db: redis.Redis,
                 ):
        """
        Initialise the RedisChallengeCache with a Redis database instance.
        :param db: The Redis database instance to use for caching messages.
        """
        self.db = db

    async def save_challenge(self,
                             nonce: str,
                             difficulty: int,
                             ):
        """
        Store a generated challenge in the cache.
        :param nonce: The challenge nonce, generated by challenger
        :param difficulty: The difficulty of the challenge, by how many leading zeros it should have
        """
        await self.db.set(
            f'challenge:{nonce}',
            difficulty,
            ex=300,
        )

    async def get_challenge(self,
                            nonce: str,
                            ) -> int | None:
        """
        Retrieve a challenge from the cache.
        :param nonce: The challenge nonce to retrieve
        :return: The difficulty of the challenge if it exists and is not expired, otherwise None
        """
        return await self.db.get(f'challenge:{nonce}')


class RedisCache(Cache):
    """
    A Redis-based implementation of the Cache for sharing data between processes.
    """

    _db: redis.Redis | None = None

    def __init__(self,
                 client: redis.Redis | None = None,
                 ):
        """
        Initialise the RedisCache with an optional Redis client.
        :param client: Optional Redis client instance.
        """
        if client is not None:
            self._db = client

    @property
    def db(self) -> redis.Redis:
        """
        Get the Redis database instance.
        :return: The Redis database instance.
        """
        if self._db is None:
            raise ValueError("Redis client is not set. Call set_client() first.")
        return self._db

    @classmethod
    def set_client(cls,
                   client: redis.Redis,
                   ):
        """
        Set the Redis client for the cache.
        :param client: Redis client instance.
        """
        cls._db = client

    @property
    def challenge(self) -> RedisChallengeCache:
        """
        Return the challenge cache instance.
        :return: An instance of RedisChallengeCache for managing JWT-related data.
        """
        return RedisChallengeCache(self.db)
