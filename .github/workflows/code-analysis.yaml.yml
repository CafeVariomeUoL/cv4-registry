name: Code Analysis with SonarQube

permissions:
  checks: write
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
      types: [opened, synchronize, reopened]

jobs:
  analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:8.2
        ports:
          - 16379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

      mongodb:
        image: mongo:8.0.14
        ports:
          - 37017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping:1 }).ok' | grep 1 || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
          
      - name: Wait for Redis & Mongo
        run: |
          set -e
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/16379) >/dev/null 2>&1 && \
            (echo > /dev/tcp/127.0.0.1/37017) >/dev/null 2>&1 && break
            echo "Waiting for Redis/Mongo... ($i/60)"
            sleep 2
          done

      - name: Run tests with coverage
        continue-on-error: true
        env:
          DR_AUTO_APPROVE: "false"
          DR_ALLOW_ORIGINS: "[]"
          DR_TRUSTED_PROXIES: '["127.0.0.1"]'
          DR_DATABASE_DRIVER: "mongo"
          DR_MONGODB_HOST: "localhost"
          DR_MONGODB_PORT: "37017"
          DR_MONGODB_DB_NAME: "ddn-registry"
          DR_CACHE_DRIVER: "redis"
          DR_REDIS_HOST: "localhost"
          DR_REDIS_PORT: "16379"
          DR_LOGGING_LEVEL: "DEBUG"
          DR_USE_HTTPS: "false"
          DR_ADMIN_USERNAME: "test_admin"
          DR_ADMIN_PASSWORD: "test_password"
        run: |
          export PYTHONPATH=./src:$PYTHONPATH
          pytest --junitxml=test-results.xml --cov=dedi_registry --cov-report=xml --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Extract Version
        run: |
          VERSION=$(awk -F'"' '/^__version__/ {print $2}' ./src/dedi_registry/__init__.py)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectVersion=${{ env.VERSION }}

      - name: Publish test results
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: "test-results.xml"
